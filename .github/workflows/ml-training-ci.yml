name: ML Training CI  - Advance Criteria

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Dump env
      - name: Check Env
        run: env

      # Python setup + deps
      - name: Set Up Python 3.12.7
        uses: actions/setup-python@v3
        with:
          python-version: '3.12.7'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          cd MLProject
          pip install -r requirements.txt

      # MLflow / DagsHub creds
      - name: Setup MLflow Tracking
        env:
          MLFLOW_TRACKING_URI:     ${{ secrets.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
          DAGSHUB_TOKEN:          ${{ secrets.DAGSHUB_TOKEN }}
        run: echo "MLflow & DagsHub credentials are set"

      # Run training
      - name: Run MLflow Project
        working-directory: MLProject
        run: |
          mlflow run . --env-manager local \
            --experiment-name crypto_sentiment_modeling_docker_v5 \
            -P data_path=preprocessed_cryptonews.csv \
            -P output_model=best_lgbm_model.pkl

      # Verify artifacts
      - name: Verify Model Artefak Existence
        run: |
          ls -la MLProject/models/best_lgbm_model.pkl
          ls -la MLProject/models/confusion_matrix.png

      # Upload to GH Actions UI
      - name: Upload Model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trained-models
          path: |
            MLProject/models/best_lgbm_model.pkl
            MLProject/models/confusion_matrix.png

      # Google Drive upload
      - name: Install gdrive CLI
        run: |
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth google-auth-httplib2 google-auth-oauthlib

      - name: Upload Model to Google Drive
        env:
          GDRIVE_TOKEN:     ${{ secrets.GDRIVE_TOKEN }}
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        run: |
          # write SA key to file
          echo "$GDRIVE_TOKEN" > sa-key.json

          python << 'EOF'
          import os
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          SCOPES = ['https://www.googleapis.com/auth/drive']
          creds = service_account.Credentials.from_service_account_file('sa-key.json', scopes=SCOPES)
          drive = build('drive', 'v3', credentials=creds)

          folder_id = os.environ['GDRIVE_FOLDER_ID']
          models_dir = 'MLProject/models'

          for fname in os.listdir(models_dir):
              path = os.path.join(models_dir, fname)
              media = MediaFileUpload(path, resumable=True)
              meta = {'name': fname, 'parents': [folder_id]}
              drive.files().create(body=meta, media_body=media, fields='id').execute()

          print('âœ… Upload to Google Drive done.')
          EOF

      # Build Docker
      - name: Build Docker Image
        working-directory: MLProject
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USER }}/crypto-sentiment:latest .

      # Tag Docker Image
      - name: Tag Docker Image
        run: |
          docker tag ${{ secrets.DOCKER_HUB_USER }}/crypto-sentiment:latest \
                    ${{ secrets.DOCKER_HUB_USER }}/crypto-sentiment:${{ github.sha }}


      # Login + Tag + Push
      - name: Push to Docker Hub
        if: github.ref == 'refs/heads/main'
        env:
          DOCKER_HUB_USER:  ${{ secrets.DOCKER_HUB_USER }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: |
          echo "$DOCKER_HUB_TOKEN" | docker login --username "$DOCKER_HUB_USER" --password-stdin

          # tag with SHA
          docker tag ${{ secrets.DOCKER_HUB_USER }}/crypto-sentiment:latest \
                     ${{ secrets.DOCKER_HUB_USER }}/crypto-sentiment:${{ github.sha }}

          docker push ${{ secrets.DOCKER_HUB_USER }}/crypto-sentiment:latest
          docker push ${{ secrets.DOCKER_HUB_USER }}/crypto-sentiment:${{ github.sha }}
